"""
This is a python package to format regression
output form multiple packages.

@authors:
    Christoph Scheuch
        christoph.scheuch@gmail.com
        https://christophscheuch.github.io
"""

import pandas as pd
import numpy as np

def calculate_residuals(results, digits):
    """
    Calculate and return the statistics of residuals from the given regression results.
    
    Parameters:
    - results (object): A regression results object that contains a 'resid' attribute, typically from statsmodels.
    - digits (int): Number of decimal places to round the calculated statistics to.
    
    Returns:
    - pd.DataFrame: A DataFrame containing the following statistics of residuals:
        * Min: Minimum value of residuals.
        * Q25: 25th percentile (1st quartile) of residuals.
        * Q50: Median (50th percentile) of residuals.
        * Q75: 75th percentile (3rd quartile) of residuals.
        * Max: Maximum value of residuals.
        
    Example:
    >>> import statsmodels.api as sm
    >>> data = sm.datasets.longley.load(as_pandas=True)
    >>> X = data.exog
    >>> y = data.endog
    >>> X = sm.add_constant(X)
    >>> model = sm.OLS(y, X)
    >>> results = model.fit()
    >>> calculate_residuals(results, 2)
       Min   Q25   Q50   Q75   Max
    0 -2.68 -0.52  0.11  1.19  2.74
    """
    
    # Extract residuals
    residuals = results.resid
    
    # Calculate residuals' statistics
    residuals_min = residuals.min()
    residuals_q25 = residuals.quantile(0.25)
    residuals_q50 = residuals.median()
    residuals_75 = residuals.quantile(0.75)
    residuals_max = residuals.max()
    
    # Collect statistics in a data frame
    residuals =  pd.DataFrame({
        "Min": [residuals_min],
        "Q25": [residuals_q25],
        "Q50": [residuals_q50],
        "Q75": [residuals_75],
        "Max": [residuals_max]
    }).round(digits)
    
    return(residuals)

def create_coefficients_table(results, digits):
    """
    Extract and format the coefficients table from regression results.
    
    This function extracts the coefficients table from the summary of regression results, 
    typically from statsmodels, and returns a formatted DataFrame with selected columns 
    and rounded values.
    
    Parameters:
    - results (object): A regression results object that contains a 'summary' method, typically from statsmodels.
    - digits (int): Number of decimal places to round the values in the coefficients table to.
    
    Returns:
    - pd.DataFrame: A DataFrame containing the following columns:
        * Estimate: Coefficient estimates.
        * Std. Error: Standard error of the coefficients.
        * t-Statistic: t-statistic values.
        * p-Value: p-values associated with the t-statistics.
        
    Example:
    >>> import statsmodels.api as sm
    >>> data = sm.datasets.longley.load(as_pandas=True)
    >>> X = data.exog
    >>> y = data.endog
    >>> X = sm.add_constant(X)
    >>> model = sm.OLS(y, X)
    >>> results = model.fit()
    >>> create_coefficients_table(results, 2)
                   Estimate  Std. Error  t-Statistic  p-Value
    const          -3482.25      890.38        -3.91     0.00
    GNPDEFL           15.06       84.91         0.18     0.86
    GNP               -0.04        0.04        -1.06     0.31
    UNEMP             -2.02        0.49        -4.14     0.00
    ARMED             -1.03        0.21        -4.88     0.00
    POP               -0.05        0.23        -0.23     0.82
    YEAR               1.82        0.45         4.04     0.00
    """
    
    # Extract results 
    results_data = results.summary().tables[1].data

    # Collect coefficient statistics in a data frame
    coefficients_table = (pd.DataFrame(
        results_data[1:], 
        columns=results_data[0]
      )
      .get(["", "coef", "std err", "t", "P>|t|"])
      .rename(columns={
        "coef": "Estimate",
        "std err": "Std. Error",
        "t": "t-Statistic",
        "P>|t|": "p-Value"
        },
      )
      .set_index("")
      .apply(pd.to_numeric, errors='coerce')
      .round(digits)
    )
    
    return(coefficients_table)

    
def format_r_style(results, digits):
    """
    Format and print regression results in a style similar to R's summary() output for linear models.
    
    This function takes regression results, typically from statsmodels, and prints a summary 
    that resembles the output provided by R's summary() function for linear models. The summary 
    includes the model formula, residuals statistics, coefficients table, and other summary statistics.
    
    Parameters:
    - results (object): A regression results object, typically from statsmodels, that contains attributes 
                        like 'model', 'nobs', 'mse_resid', 'rsquared', 'rsquared_adj', 'fvalue', 'df_model', 
                        'df_resid', and 'f_pvalue'.
    - digits (int): Number of decimal places to round the values in the summary to.
    
    Returns:
    - None: The function prints the formatted summary directly.
    
    Example:
    >>> import statsmodels.api as sm
    >>> data = sm.datasets.longley.load(as_pandas=True)
    >>> X = data.exog
    >>> y = data.endog
    >>> X = sm.add_constant(X)
    >>> model = sm.OLS(y, X)
    >>> results = model.fit()
    >>> r_style(results, 2)
    Model:
    y ~ X1 + X2 + ... + Xn

    Residuals:
    Min   Q25   Q50   Q75   Max
    ...

    Coefficients:
    ...
    
    Summary statistics:
    - Number of observations: ...
    - Residual standard error: ...
    - Multiple R-squared: ..., Adjusted R-squared: ...
    - F-statistic: ... on ... and ... DF, p-value: ...
    """
    
    # Print the header
    output = "\nModel:\n"
    output += f"" + results.model.formula + "\n\n"
    output += "Residuals:\n"
    output += calculate_residuals(results, digits).to_string(index=False) + "\n\n"

    # Add coefficients to the output string
    output += "Coefficients:\n"
    output += create_coefficients_table(results, digits).to_string() + "\n\n"

    # Add footer with additional statistics to the output string
    output += "Summary statistics:\n"
    output += f"- Number of observations: {results.nobs:.0f} \n"
    output += f"- Residual standard error: " + str(round(results.mse_resid**0.5, 3)) + "\n"
    output += f"- Multiple R-squared: {results.rsquared:.3f}, Adjusted R-squared: {results.rsquared_adj:.3f}\n"
    output += f"- F-statistic: {results.fvalue:.3f} on {results.df_model:.0f} and {results.df_resid:.0f} DF, p-value: {results.f_pvalue:.3f}\n"

    # Return the output string
    print(output)

